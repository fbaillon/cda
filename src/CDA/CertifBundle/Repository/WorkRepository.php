<?php

namespace CDA\CertifBundle\Repository;

use Symfony\Component\Validator\Constraints\Date;

use CDA\CertifBundle\Entity\Picture;

use Doctrine\ORM\EntityRepository;

/**
 * WorkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorkRepository extends EntityRepository
{
    /**
     * Get the number of works for a given artist
     * 
     * @param integer artistId
     * @return query
     */
    public function getNumberOfWorks()
    {
        return $this->createQueryBuilder('w')
                                ->select('COUNT(w)')
                                ->getQuery();
    }

    /**
     * Build request to retrieve a work from slug
     * 
     * @param string		$slug
     * @return array
     */
    public function findWorkBySlug($slug)
    {
        $qb = $this->createQueryBuilder('w')
                        ->join('w.artist', 'a')
                        ->join('w.pictures', 'p')
                        ->addSelect('a')
                        ->addSelect('p')
                        ->andWhere('w.slug = :slug')
                        ->andWhere('p.mainView = TRUE')
                        ->setParameter('slug', $slug);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Build request to retrieve all works of a given artist,
     * except the given work
     * 
     * @param integer		$artistId
     * @param integer		$workId
     * @return array
     */
    public function findArtistWorks($artistId, $workId)
    {
        $qb = $this->createQueryBuilder('w')
                        ->join('w.artist', 'a')
                        ->join('w.pictures', 'p')
                        ->addSelect('p')
                        ->andWhere('a.id = :artist_id')
                        ->andWhere('w.id <> :work_id')
                        ->andWhere('p.mainView = TRUE')
                        ->andWhere('w.isEnabled = TRUE')
                        ->andWhere('p.isEnabled = TRUE')
                        ->setParameter('work_id', $workId)
                        ->setParameter('artist_id', $artistId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Build request to retrieve all pictures of a given type from a given work
     * 
     * @param integer		$workId
     * @param array			$type
     * @return array
     */
    public function findWorkPicturesByType($workId, $type)
    {
        $qb = $this->createQueryBuilder('w')
                        ->join('w.pictures', 'p')
                        ->addSelect('p')
                        ->andWhere('w.id = :work_id')
                        ->andWhere('p.pictureCategory IN (:incat)')
                        ->andWhere('w.isEnabled = TRUE')
                        ->andWhere('p.isEnabled = TRUE')
                        ->setParameter('work_id', $workId)
                        ->setParameter('incat', $type);

        return $qb->getQuery()->getArrayResult();
    }
	
    public function findWorksByDate($selection)
    {
        $qb = $this->findWorks($selection);

        $qb->orderBy('w.createdAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function findWorksByRate($selection)
    {
        $qb = $this->findWorks($selection);

        $qb->orderBy('w.note', 'DESC');
        $query = $qb->getQuery();
        $works = $query->getResult();
        
        return $qb->getQuery()->getResult();
    }

    public function findWorksByView($selection)
    {
        $qb = $this->findWorks($selection);

        $qb->orderBy('', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /*
     * @params void
     * @return Doctrine\ORM\QueryBuilder
     */
    private function findWorks($selection)
    {
        switch ($selection)
        {
            case 'W':	
                    $dateInterval = new \DateInterval('P7D');
                    break;

            case 'M':
                    $dateInterval = new \DateInterval('P1M');
                    break;

            case 'Y':
                    $dateInterval = new \DateInterval('P1Y');
                    break;

            case 'A':
                    $beginningOfProject = new \DateTime();
                    $beginningOfProject->setDate(2012, 9, 3);
                    $dateInterval = $beginningOfProject->diff(new \DateTime());
                    break;

            default:
            case 'D':
                    $beginningOfDay = new \DateTime();
                    $beginningOfDay->setTime(0, 0, 0);
                    $dateInterval = $beginningOfDay->diff(new \DateTime());
                    break;
        }
        return $this->findWorksOverTime($dateInterval);
    }
	
    /*
     * Find works over a period of time
     * 
     * @params \DateInterval $dateInterval
     * @return Doctrine\ORM\QueryBuilder
     */
    private function findWorksOverTime(\DateInterval $dateInterval)
    {
        $beginning = new \DateTime();
        $beginning->sub($dateInterval);     // Substract from now the given period of time

        return $this->createQueryBuilder('w')
                        ->join('w.pictures', 'p')
                        ->addSelect('p')
                        ->andWhere('w.isEnabled = TRUE')
                        ->andWhere('p.isEnabled = TRUE')
                        ->andWhere('p.pictureCategory IN (:incat)')
                        ->andWhere('p.createdAt BETWEEN :start AND :end')
                        ->setParameter('incat', array("Ebauche", "Final"))
                        ->setParameter('start', $beginning)
                        ->setParameter('end', new \DateTime());
    }

}